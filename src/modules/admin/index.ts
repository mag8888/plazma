import { Markup, Telegraf } from 'telegraf';
import { Context } from '../../bot/context.js';
import { BotModule } from '../../bot/types.js';
import { logUserAction } from '../../services/user-history.js';
import { prisma } from '../../lib/prisma.js';

const ADMIN_ACTION = 'admin:main';
const CATEGORIES_ACTION = 'admin:categories';
const PRODUCTS_ACTION = 'admin:products';
const PARTNERS_ACTION = 'admin:partners';
const REVIEWS_ACTION = 'admin:reviews';
const ORDERS_ACTION = 'admin:orders';

const ADMIN_MENU_TEXT = `üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;

function adminKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', CATEGORIES_ACTION), Markup.button.callback('üõç –¢–æ–≤–∞—Ä—ã', PRODUCTS_ACTION)],
    [Markup.button.callback('üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã', PARTNERS_ACTION), Markup.button.callback('‚≠ê –û—Ç–∑—ã–≤—ã', REVIEWS_ACTION)],
    [Markup.button.callback('üì¶ –ó–∞–∫–∞–∑—ã', ORDERS_ACTION)],
  ]);
}

async function showCategories(ctx: Context) {
  try {
    const categories = await prisma.category.findMany({
      orderBy: { createdAt: 'desc' },
      take: 10,
    });

    let message = 'üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n';
    
    if (categories.length === 0) {
      message += '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    } else {
      categories.forEach((cat, index) => {
        message += `${index + 1}. ${cat.name}\n`;
        message += `   –°–ª–∞–≥: ${cat.slug}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${cat.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n`;
        if (cat.description) {
          message += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${cat.description}\n`;
        }
        message += '\n';
      });
    }

    await ctx.answerCbQuery();
    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'admin:add_category')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', ADMIN_ACTION)],
    ]));
  } catch (error) {
    console.error('Error fetching categories:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  }
}

async function showProducts(ctx: Context) {
  try {
    const products = await prisma.product.findMany({
      include: { category: true },
      orderBy: { createdAt: 'desc' },
      take: 10,
    });

    let message = 'üõç –¢–æ–≤–∞—Ä—ã:\n\n';
    
    if (products.length === 0) {
      message += '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    } else {
      products.forEach((product, index) => {
        message += `${index + 1}. ${product.title}\n`;
        message += `   –¶–µ–Ω–∞: ${product.price} ‚ÇΩ\n`;
        message += `   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category.name}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${product.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
        message += `   –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${product.summary}\n\n`;
      });
    }

    await ctx.answerCbQuery();
    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'admin:add_product')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', ADMIN_ACTION)],
    ]));
  } catch (error) {
    console.error('Error fetching products:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
  }
}

async function showPartners(ctx: Context) {
  try {
    const partners = await prisma.partnerProfile.findMany({
      include: { user: true },
      orderBy: { createdAt: 'desc' },
      take: 10,
    });

    let message = 'üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã:\n\n';
    
    if (partners.length === 0) {
      message += '–ü–∞—Ä—Ç–Ω—ë—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    } else {
      partners.forEach((partner, index) => {
        message += `${index + 1}. ${partner.user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n`;
        message += `   Username: @${partner.user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   –¢–∏–ø: ${partner.programType === 'DIRECT' ? '–ü—Ä—è–º–∞—è (25%)' : '–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è (15%+5%+5%)'}\n`;
        message += `   –ë–∞–ª–∞–Ω—Å: ${partner.balance} ‚ÇΩ\n`;
        message += `   –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤: ${partner.totalPartners}\n`;
        message += `   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${partner.referralCode}\n\n`;
      });
    }

    await ctx.answerCbQuery();
    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', ADMIN_ACTION)],
    ]));
  } catch (error) {
    console.error('Error fetching partners:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤');
  }
}

async function showReviews(ctx: Context) {
  try {
    const reviews = await prisma.review.findMany({
      orderBy: { createdAt: 'desc' },
      take: 10,
    });

    let message = '‚≠ê –û—Ç–∑—ã–≤—ã:\n\n';
    
    if (reviews.length === 0) {
      message += '–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    } else {
      reviews.forEach((review, index) => {
        message += `${index + 1}. ${review.name}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${review.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
        message += `   –ó–∞–∫—Ä–µ–ø–ª—ë–Ω: ${review.isPinned ? 'üìå –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
        message += `   –¢–µ–∫—Å—Ç: ${review.content.substring(0, 100)}${review.content.length > 100 ? '...' : ''}\n\n`;
      });
    }

    await ctx.answerCbQuery();
    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'admin:add_review')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', ADMIN_ACTION)],
    ]));
  } catch (error) {
    console.error('Error fetching reviews:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤');
  }
}

async function showOrders(ctx: Context) {
  try {
    const orders = await prisma.orderRequest.findMany({
      include: { user: true },
      orderBy: { createdAt: 'desc' },
      take: 10,
    });

    let message = 'üì¶ –ó–∞–∫–∞–∑—ã:\n\n';
    
    if (orders.length === 0) {
      message += '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    } else {
      orders.forEach((order, index) => {
        message += `${index + 1}. –ó–∞–∫–∞–∑ #${order.id.substring(0, 8)}\n`;
        message += `   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${order.user?.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
        message += `   –ö–æ–Ω—Ç–∞–∫—Ç: ${order.contact || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   –°–æ–æ–±—â–µ–Ω–∏–µ: ${order.message.substring(0, 50)}${order.message.length > 50 ? '...' : ''}\n\n`;
      });
    }

    await ctx.answerCbQuery();
    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', ADMIN_ACTION)],
    ]));
  } catch (error) {
    console.error('Error fetching orders:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
  }
}

export const adminModule: BotModule = {
  async register(bot: Telegraf<Context>) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    const isAdmin = (ctx: Context) => {
      return ctx.from?.id.toString() === process.env.ADMIN_CHAT_ID;
    };

    bot.hears(['–∞–¥–º–∏–Ω', 'admin'], async (ctx) => {
      if (!isAdmin(ctx)) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        return;
      }
      
      await logUserAction(ctx, 'admin:access');
      await ctx.reply(ADMIN_MENU_TEXT, adminKeyboard());
    });

    bot.action(ADMIN_ACTION, async (ctx) => {
      if (!isAdmin(ctx)) return;
      await ctx.answerCbQuery();
      await ctx.reply(ADMIN_MENU_TEXT, adminKeyboard());
    });

    bot.action(CATEGORIES_ACTION, async (ctx) => {
      if (!isAdmin(ctx)) return;
      await logUserAction(ctx, 'admin:categories');
      await showCategories(ctx);
    });

    bot.action(PRODUCTS_ACTION, async (ctx) => {
      if (!isAdmin(ctx)) return;
      await logUserAction(ctx, 'admin:products');
      await showProducts(ctx);
    });

    bot.action(PARTNERS_ACTION, async (ctx) => {
      if (!isAdmin(ctx)) return;
      await logUserAction(ctx, 'admin:partners');
      await showPartners(ctx);
    });

    bot.action(REVIEWS_ACTION, async (ctx) => {
      if (!isAdmin(ctx)) return;
      await logUserAction(ctx, 'admin:reviews');
      await showReviews(ctx);
    });

    bot.action(ORDERS_ACTION, async (ctx) => {
      if (!isAdmin(ctx)) return;
      await logUserAction(ctx, 'admin:orders');
      await showOrders(ctx);
    });
  },
};
