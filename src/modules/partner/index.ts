import { Markup, Telegraf } from 'telegraf';
import { PartnerProgramType } from '@prisma/client';
import { Context } from '../../bot/context.js';
import { BotModule } from '../../bot/types.js';
import { ensureUser, logUserAction } from '../../services/user-history.js';
import { buildReferralLink, getOrCreatePartnerProfile, getPartnerDashboard } from '../../services/partner-service.js';

const DASHBOARD_ACTION = 'partner:dashboard';
const DIRECT_PLAN_ACTION = 'partner:plan:direct';
const MULTI_PLAN_ACTION = 'partner:plan:multi';
const PARTNERS_ACTION = 'partner:list';
const INVITE_ACTION = 'partner:invite';
const INVITE_DIRECT_ACTION = 'partner:invite:direct';
const INVITE_MULTI_ACTION = 'partner:invite:multi';
const PARTNERS_LEVEL_1_ACTION = 'partner:level:1';
const PARTNERS_LEVEL_2_ACTION = 'partner:level:2';
const PARTNERS_LEVEL_3_ACTION = 'partner:level:3';

const programIntro = `‚ú® –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã

üëã –°—Ç–∞–Ω—å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º Plazma Water!
–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥—Ä—É–∑—å—è–º –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥.

üí∏ 25% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.
üîó –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π.

‚∏ª

üìå –£ –Ω–∞—Å –µ—Å—Ç—å 2 —Ñ–æ—Ä–º–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è:`;

const cardTemplate = (params: {
  balance: string;
  partners: number;
  direct: number;
  bonus: string;
  referral?: string;
  transactions: string[];
}) => `üßæ –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç)
	‚Ä¢	üí∞ –ë–∞–ª–∞–Ω—Å: [${params.balance} ‚ÇΩ]
	‚Ä¢	üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã: [${params.partners}]
	‚Ä¢	üéÅ –ë–æ–Ω—É—Å—ã: [${params.bonus} ‚ÇΩ]
${params.referral ? `	‚Ä¢	üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: [${params.referral}]` : '	‚Ä¢	üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: [–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã]'}
${params.transactions.length ? `	‚Ä¢	üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: [—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π]\n${params.transactions.join('\n')}` : '	‚Ä¢	üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: [—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π]'}`;

const directPlanText = `(–Ω–∞ –∫–Ω–æ–ø–∫—É 25%) –ü—Ä—è–º–∞—è –∫–æ–º–∏—Å—Å–∏—è ‚Äî 25%
–î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π ‚Üí –ø–æ–ª—É—á–∞–µ—Ç–µ 25% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –¥—Ä—É–∑–µ–π.

üì≤ –í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!`;

const multiPlanText = `(–Ω–∞ –∫–Ω–æ–ø–∫—É 15% + 5% + 5%) –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Äî 15% + 5% + 5%
	‚Ä¢	15% —Å –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π (1-–π —É—Ä–æ–≤–µ–Ω—å)
	‚Ä¢	5% —Å –ø–æ–∫—É–ø–æ–∫ –∏—Ö –¥—Ä—É–∑–µ–π (2-–π —É—Ä–æ–≤–µ–Ω—å)
	‚Ä¢	5% —Å –ø–æ–∫—É–ø–æ–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è (3-–π —É—Ä–æ–≤–µ–Ω—å)

üì≤ –í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!`;

function planKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('–ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞', DASHBOARD_ACTION)],
    [Markup.button.callback('25%', DIRECT_PLAN_ACTION), Markup.button.callback('15% + 5% + 5%', MULTI_PLAN_ACTION)],
  ]);
}

function partnerActionsKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('–ú–æ–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã', PARTNERS_ACTION), Markup.button.callback('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', INVITE_ACTION)],
    [Markup.button.callback('–°—Å—ã–ª–∫–∞ 25%', INVITE_DIRECT_ACTION), Markup.button.callback('–°—Å—ã–ª–∫–∞ 15%+5%+5%', INVITE_MULTI_ACTION)],
    [Markup.button.callback('–ü–∞—Ä—Ç–Ω—ë—Ä—ã: 1-–π', PARTNERS_LEVEL_1_ACTION), Markup.button.callback('–ü–∞—Ä—Ç–Ω—ë—Ä—ã: 2-–π', PARTNERS_LEVEL_2_ACTION), Markup.button.callback('–ü–∞—Ä—Ç–Ω—ë—Ä—ã: 3-–π', PARTNERS_LEVEL_3_ACTION)],
  ]);
}

async function showDashboard(ctx: Context) {
  const user = await ensureUser(ctx);
  if (!user) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const dashboard = await getPartnerDashboard(user.id);
  if (!dashboard) {
    await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —É—á–∞—Å—Ç–∏—è.');
    return;
  }

  const { profile, stats } = dashboard;
  const transactions = profile.transactions.map((tx) => {
    const sign = tx.type === 'CREDIT' ? '+' : '-';
    const amount = Number(tx.amount).toFixed(2);
    return `${sign}${amount} ‚ÇΩ ‚Äî ${tx.description}`;
  });

  const message = cardTemplate({
    balance: Number(profile.balance).toFixed(2),
    partners: stats.partners,
    direct: stats.directPartners,
    bonus: Number(profile.bonus).toFixed(2),
    referral: buildReferralLink(profile.referralCode, profile.programType),
    transactions,
  });

  await ctx.reply(message, partnerActionsKeyboard());
}

async function handlePlanSelection(ctx: Context, programType: PartnerProgramType, message: string) {
  const user = await ensureUser(ctx);
  if (!user) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const profile = await getOrCreatePartnerProfile(user.id, programType);
  await logUserAction(ctx, 'partner:select-program', { programType });
  await ctx.answerCbQuery('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
  await ctx.reply(`${message}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: ${buildReferralLink(profile.referralCode, programType)}`, partnerActionsKeyboard());
}

async function showPartners(ctx: Context) {
  const user = await ensureUser(ctx);
  if (!user) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.');
    return;
  }

  const dashboard = await getPartnerDashboard(user.id);
  if (!dashboard) {
    await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É.');
    return;
  }

  const { stats } = dashboard;
  await ctx.answerCbQuery();
  await ctx.reply(`üë• –ú–æ–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã\n–í—Å–µ–≥–æ: ${stats.partners}\n–ü—Ä—è–º—ã—Ö: ${stats.directPartners}`);
}

async function showPartnersByLevel(ctx: Context, level: number) {
  const user = await ensureUser(ctx);
  if (!user) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.');
    return;
  }

  const dashboard = await getPartnerDashboard(user.id);
  if (!dashboard) {
    await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É.');
    return;
  }

  await ctx.answerCbQuery();
  
  let message = `üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã ${level}-–≥–æ —É—Ä–æ–≤–Ω—è\n\n`;
  
  if (level === 1) {
    message += `–ü—Ä—è–º—ã–µ –ø–∞—Ä—Ç–Ω—ë—Ä—ã: ${dashboard.stats.directPartners}\n`;
    message += `–ü–æ–ª—É—á–∞–µ—Ç–µ 15% —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫`;
  } else if (level === 2) {
    message += `–ü–∞—Ä—Ç–Ω—ë—Ä—ã 2-–≥–æ —É—Ä–æ–≤–Ω—è: ${dashboard.stats.multiPartners}\n`;
    message += `–ü–æ–ª—É—á–∞–µ—Ç–µ 5% —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫`;
  } else if (level === 3) {
    message += `–ü–∞—Ä—Ç–Ω—ë—Ä—ã 3-–≥–æ —É—Ä–æ–≤–Ω—è: ${dashboard.stats.partners - dashboard.stats.directPartners - dashboard.stats.multiPartners}\n`;
    message += `–ü–æ–ª—É—á–∞–µ—Ç–µ 5% —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫`;
  }
  
  await ctx.reply(message);
}

async function showInvite(ctx: Context) {
  const user = await ensureUser(ctx);
  if (!user) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    return;
  }

  const dashboard = await getPartnerDashboard(user.id);
  if (!dashboard) {
    await ctx.reply('–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    return;
  }

  await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Å—ã–ª–∫–∏', { show_alert: false });
  await ctx.reply(`–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n\nüîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ (25% —Å –ø–æ–∫—É–ø–æ–∫):\n${buildReferralLink(dashboard.profile.referralCode, 'DIRECT')}\n\nüîó –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ (15% + 5% + 5%):\n${buildReferralLink(dashboard.profile.referralCode, 'MULTI_LEVEL')}`);
}

async function showDirectInvite(ctx: Context) {
  const user = await ensureUser(ctx);
  if (!user) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    return;
  }

  const dashboard = await getPartnerDashboard(user.id);
  if (!dashboard) {
    await ctx.reply('–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    return;
  }

  await ctx.answerCbQuery('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞', { show_alert: false });
  await ctx.reply(`üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ (25% —Å –ø–æ–∫—É–ø–æ–∫):\n${buildReferralLink(dashboard.profile.referralCode, 'DIRECT')}`);
}

async function showMultiInvite(ctx: Context) {
  const user = await ensureUser(ctx);
  if (!user) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    return;
  }

  const dashboard = await getPartnerDashboard(user.id);
  if (!dashboard) {
    await ctx.reply('–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.');
    return;
  }

  await ctx.answerCbQuery('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞', { show_alert: false });
  await ctx.reply(`üîó –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ (15% + 5% + 5%):\n${buildReferralLink(dashboard.profile.referralCode, 'MULTI_LEVEL')}`);
}

export const partnerModule: BotModule = {
  async register(bot: Telegraf<Context>) {
    bot.hears(['–ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞', '–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞'], async (ctx) => {
      await logUserAction(ctx, 'menu:partners');
      await ctx.reply(programIntro, planKeyboard());
    });

    bot.action(DASHBOARD_ACTION, async (ctx) => {
      await ctx.answerCbQuery();
      await logUserAction(ctx, 'partner:dashboard');
      await showDashboard(ctx);
    });

    bot.action(DIRECT_PLAN_ACTION, async (ctx) => {
      await handlePlanSelection(ctx, PartnerProgramType.DIRECT, directPlanText);
    });

    bot.action(MULTI_PLAN_ACTION, async (ctx) => {
      await handlePlanSelection(ctx, PartnerProgramType.MULTI_LEVEL, multiPlanText);
    });

    bot.action(PARTNERS_ACTION, async (ctx) => {
      await logUserAction(ctx, 'partner:list');
      await showPartners(ctx);
    });

    bot.action(INVITE_ACTION, async (ctx) => {
      await logUserAction(ctx, 'partner:invite');
      await showInvite(ctx);
    });

    bot.action(INVITE_DIRECT_ACTION, async (ctx) => {
      await logUserAction(ctx, 'partner:invite:direct');
      await showDirectInvite(ctx);
    });

    bot.action(INVITE_MULTI_ACTION, async (ctx) => {
      await logUserAction(ctx, 'partner:invite:multi');
      await showMultiInvite(ctx);
    });

    bot.action(PARTNERS_LEVEL_1_ACTION, async (ctx) => {
      await logUserAction(ctx, 'partner:level:1');
      await showPartnersByLevel(ctx, 1);
    });

    bot.action(PARTNERS_LEVEL_2_ACTION, async (ctx) => {
      await logUserAction(ctx, 'partner:level:2');
      await showPartnersByLevel(ctx, 2);
    });

    bot.action(PARTNERS_LEVEL_3_ACTION, async (ctx) => {
      await logUserAction(ctx, 'partner:level:3');
      await showPartnersByLevel(ctx, 3);
    });
  },
};
