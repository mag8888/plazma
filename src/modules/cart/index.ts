import { Markup, Telegraf } from 'telegraf';
import { BotModule } from '../../bot/types.js';
import { Context } from '../../bot/context.js';
import { logUserAction } from '../../services/user-history.js';
import { getCartItems, cartItemsToText, clearCart } from '../../services/cart-service.js';

export const cartModule: BotModule = {
  async register(bot: Telegraf<Context>) {
    // Handle "–ö–æ—Ä–∑–∏–Ω–∞" button
    bot.hears(['üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞'], async (ctx) => {
      await logUserAction(ctx, 'menu:cart');
      await showCart(ctx);
    });
  },
};

async function showCart(ctx: Context) {
  try {
    const userId = ctx.from?.id?.toString();
    if (!userId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const cartItems = await getCartItems(userId);
    
    if (cartItems.length === 0) {
      await ctx.reply('üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω',
                callback_data: 'cart:go_to_shop',
              },
            ],
          ],
        },
      });
      return;
    }

    const cartText = cartItemsToText(cartItems);
    
    await ctx.reply(`üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n${cartText}`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
              callback_data: 'cart:checkout',
            },
          ],
          [
            {
              text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
              callback_data: 'cart:clear',
            },
          ],
          [
            {
              text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏',
              callback_data: 'cart:continue_shopping',
            },
          ],
        ],
      },
    });
  } catch (error) {
    console.error('Error showing cart:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// Handle cart actions
export function registerCartActions(bot: Telegraf<Context>) {
  // Go to shop
  bot.action('cart:go_to_shop', async (ctx) => {
    await ctx.answerCbQuery();
    await logUserAction(ctx, 'cart:go_to_shop');
    
    // Import shop module dynamically to avoid circular dependency
    const { showCategories } = await import('../shop/index.js');
    await showCategories(ctx);
  });

  // Continue shopping
  bot.action('cart:continue_shopping', async (ctx) => {
    await ctx.answerCbQuery();
    await logUserAction(ctx, 'cart:continue_shopping');
    
    const { showCategories } = await import('../shop/index.js');
    await showCategories(ctx);
  });

  // Clear cart
  bot.action('cart:clear', async (ctx) => {
    await ctx.answerCbQuery();
    await logUserAction(ctx, 'cart:clear');
    
    const userId = ctx.from?.id?.toString();
    if (!userId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    await clearCart(userId);
    await ctx.reply('üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
  });

  // Checkout
  bot.action('cart:checkout', async (ctx) => {
    await ctx.answerCbQuery();
    await logUserAction(ctx, 'cart:checkout');
    
    const userId = ctx.from?.id?.toString();
    if (!userId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    try {
      const cartItems = await getCartItems(userId);
      
      if (cartItems.length === 0) {
        await ctx.reply('üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
      }

      const cartText = cartItemsToText(cartItems);
      const orderText = `üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n${cartText}\n\nüìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º: @${ctx.from?.username || '–Ω–µ—Ç username'}`;

      // Send order to admin
      const { env } = await import('../../config/env.js');
      if (env.adminChatId) {
        await ctx.telegram.sendMessage(env.adminChatId, orderText);
      }
      
      // Clear cart after successful order
      await clearCart(userId);
      
      await ctx.reply('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    } catch (error) {
      console.error('Error processing checkout:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}
