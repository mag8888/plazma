import { Markup, Telegraf } from 'telegraf';
import { BotModule } from '../../bot/types.js';
import { Context } from '../../bot/context.js';
import { addPZToUser, deductPZFromUser, getUserTransactionHistory } from '../../services/partner-service.js';
import { env } from '../../config/env.js';
import { prisma } from '../../lib/prisma.js';

export const adminCommandsModule: BotModule = {
  async register(bot: Telegraf<Context>) {
    // Check if user is admin
    const isAdmin = (ctx: Context) => {
      return ctx.from?.id?.toString() === env.adminChatId;
    };

    // Add PZ command
    bot.command('addpz', async (ctx) => {
      if (!isAdmin(ctx)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      if (args.length < 3) {
        await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpz <telegram_id> <amount> <description>\n–ü—Ä–∏–º–µ—Ä: /addpz 123456789 10.50 –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
        return;
      }

      const [telegramId, amountStr, ...descriptionParts] = args;
      const amount = parseFloat(amountStr);
      const description = descriptionParts.join(' ');

      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
        return;
      }

      try {
        // Find user by telegram ID
        const user = await prisma.user.findFirst({
          where: { telegramId: telegramId }
        });

        if (!user) {
          await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }

        await addPZToUser(user.id, amount, description);
        await ctx.reply(`‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount} PZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (${telegramId})\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
      } catch (error) {
        console.error('Add PZ command error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è PZ');
      }
    });

    // Deduct PZ command
    bot.command('deductpz', async (ctx) => {
      if (!isAdmin(ctx)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      if (args.length < 3) {
        await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deductpz <telegram_id> <amount> <description>\n–ü—Ä–∏–º–µ—Ä: /deductpz 123456789 5.25 –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ');
        return;
      }

      const [telegramId, amountStr, ...descriptionParts] = args;
      const amount = parseFloat(amountStr);
      const description = descriptionParts.join(' ');

      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
        return;
      }

      try {
        // Find user by telegram ID
        const user = await prisma.user.findFirst({
          where: { telegramId: telegramId }
        });

        if (!user) {
          await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }

        await deductPZFromUser(user.id, amount, description);
        await ctx.reply(`‚úÖ –°–ø–∏—Å–∞–Ω–æ ${amount} PZ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (${telegramId})\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
      } catch (error) {
        console.error('Deduct PZ command error:', error);
        if (error instanceof Error && error.message === 'Insufficient balance') {
          await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
        } else {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è PZ');
        }
      }
    });

    // Check balance command
    bot.command('balance', async (ctx) => {
      if (!isAdmin(ctx)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      if (args.length < 1) {
        await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance <telegram_id>\n–ü—Ä–∏–º–µ—Ä: /balance 123456789');
        return;
      }

      const telegramId = args[0];

      try {
        // Find user by telegram ID
        const user = await prisma.user.findFirst({
          where: { telegramId: telegramId },
          include: { partner: true }
        });

        if (!user) {
          await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }

        const balance = user.partner?.balance || 0;
        await ctx.reply(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (${telegramId}): ${balance.toFixed(2)} PZ`);
      } catch (error) {
        console.error('Balance command error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      }
    });

    // Transaction history command
    bot.command('history', async (ctx) => {
      if (!isAdmin(ctx)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      if (args.length < 1) {
        await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <telegram_id>\n–ü—Ä–∏–º–µ—Ä: /history 123456789');
        return;
      }

      const telegramId = args[0];

      try {
        // Find user by telegram ID
        const user = await prisma.user.findFirst({
          where: { telegramId: telegramId }
        });

        if (!user) {
          await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }

        const transactions = await getUserTransactionHistory(user.id, 10);
        
        if (transactions.length === 0) {
          await ctx.reply(`üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –ø—É—Å—Ç–∞`);
          return;
        }

        let message = `üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (${telegramId}):\n\n`;
        
        transactions.forEach(tx => {
          const sign = tx.type === 'CREDIT' ? '+' : '-';
          const date = new Date(tx.createdAt).toLocaleString('ru-RU');
          message += `${sign}${Number(tx.amount).toFixed(2)} PZ ‚Äî ${tx.description}\n${date}\n\n`;
        });

        await ctx.reply(message);
      } catch (error) {
        console.error('History command error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π');
      }
    });

    // Help command for admin
    bot.command('adminhelp', async (ctx) => {
      if (!isAdmin(ctx)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
      }

      const helpText = `üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:

/addpz <telegram_id> <amount> <description>
–ù–∞—á–∏—Å–ª–∏—Ç—å PZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
–ü—Ä–∏–º–µ—Ä: /addpz 123456789 10.50 –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

/deductpz <telegram_id> <amount> <description>
–°–ø–∏—Å–∞—Ç—å PZ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü—Ä–∏–º–µ—Ä: /deductpz 123456789 5.25 –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ

/balance <telegram_id>
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü—Ä–∏–º–µ—Ä: /balance 123456789

/history <telegram_id>
–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü—Ä–∏–º–µ—Ä: /history 123456789

/adminhelp
–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`;

      await ctx.reply(helpText);
    });
  },
};
