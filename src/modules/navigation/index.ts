import { Telegraf, Markup } from 'telegraf';
import { Context } from '../../bot/context.js';
import { BotModule } from '../../bot/types.js';
import { logUserAction } from '../../services/user-history.js';
import { createPartnerReferral } from '../../services/partner-service.js';

const greeting = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
Plazma Water ‚Äî –∂–∏–¥–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã –≤ –Ω–∞–Ω–æ—Ñ–æ—Ä–º–µ.
üíß –£—Å–≤–æ–µ–Ω–∏–µ ‚Äî –¥–æ 99,9% (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–∞–±–ª–µ—Ç–æ–∫ 1‚Äì10%).
‚ö° –ë—ã—Å—Ç—Ä–æ, –ª–µ–≥–∫–æ –∏ –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—á–µ–Ω—å –∏ –ø–æ—á–∫–∏ ‚Äî –ø–∏—Ç–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ –∫–ª–µ—Ç–∫–∏.

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? üëá`;

const introDetails = `‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.

üíß –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω–∞–Ω–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –¥–æ 99,9%, –¥–æ—Å—Ç–∞–≤–ª—è—è –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä—è–º–æ –≤ –∫–ª–µ—Ç–∫–∏.
‚ö° –ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –ª—ë–≥–∫–æ—Å—Ç—å, —è—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä—è–¥ —Å–∏–ª –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å.

üåø –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—á–µ–Ω—å –∏ –ø–æ—á–∫–∏.
üõ° –ù–∞–¥—ë–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∏—Ä—É—Å–æ–≤ –∏ –ø–∞—Ç–æ–≥–µ–Ω–æ–≤.
üíö –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –Ω–∞ –∫–ª–µ—Ç–æ—á–Ω–æ–º —É—Ä–æ–≤–Ω–µ.

üë©‚Äçü¶∞ –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ Plazma Water –≤ –∫–æ—Å–º–µ—Ç–∏–∫—É –∏ —É—Ö–æ–¥.
üè° –ó–∞–±–æ—Ç–∞ –æ –¥–æ–º–µ –∏ –ø—Ä–∏—Ä–æ–¥–µ ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π, —É—Å–∏–ª–∏–≤–∞—è –∏—Ö —Ä–æ—Å—Ç.

üî• –û–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç ‚Äî –¥–µ—Å—è—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π: –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏, –∑–¥–æ—Ä–æ–≤—å—è, –∫—Ä–∞—Å–æ—Ç—ã –∏ –≥–∞—Ä–º–æ–Ω–∏–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—â—É—â–∞–µ—Ç—Å—è —É–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π.`;

export function mainKeyboard() {
  return Markup.keyboard([
    ['–ú–∞–≥–∞–∑–∏–Ω', '–ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞'],
    ['–û—Ç–∑—ã–≤—ã', '–û –Ω–∞—Å'],
  ]).resize();
}

export const navigationModule: BotModule = {
  async register(bot: Telegraf<Context>) {
    bot.start(async (ctx) => {
      await logUserAction(ctx, 'command:start');
      
      // Check if user came from referral link
      const startPayload = ctx.startPayload;
      if (startPayload && (startPayload.startsWith('ref_direct_') || startPayload.startsWith('ref_multi_'))) {
        const [prefix, referralCode] = startPayload.split('_', 2);
        const programType = prefix === 'ref' ? 'DIRECT' : 'MULTI_LEVEL';
        
        try {
          // Find partner profile by referral code
          const { prisma } = await import('../../lib/prisma.js');
          const partnerProfile = await prisma.partnerProfile.findUnique({
            where: { referralCode },
            include: { user: true }
          });
          
          if (partnerProfile) {
            // Create referral record
            await createPartnerReferral(partnerProfile.id, 1, ctx.from?.id?.toString());
            
            const programText = programType === 'DIRECT' 
              ? '–ø—Ä—è–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (25% —Å –ø–æ–∫—É–ø–æ–∫)'
              : '–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (15% + 5% + 5%)';
              
            await ctx.reply(`üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç ${partnerProfile.user.firstName || '–ø–∞—Ä—Ç–Ω—ë—Ä–∞'} –≤ ${programText}!`);
            await logUserAction(ctx, 'partner:referral_joined', { 
              referralCode, 
              partnerId: partnerProfile.id,
              programType 
            });
          }
        } catch (error) {
          console.error('Error processing referral:', error);
        }
      }
      
      await ctx.reply(greeting, mainKeyboard());
      await ctx.reply('‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                callback_data: 'nav:more',
              },
            ],
          ],
        },
      });
    });


    bot.hears(['–ú–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'], async (ctx) => {
      await logUserAction(ctx, 'menu:main');
      await ctx.reply(greeting, mainKeyboard());
    });

    bot.action('nav:more', async (ctx) => {
      await ctx.answerCbQuery();
      await logUserAction(ctx, 'cta:detailed-intro');
      await ctx.reply(introDetails);
    });
  },
};
