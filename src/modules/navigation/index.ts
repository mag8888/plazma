import { Telegraf, Markup } from 'telegraf';
import { Context } from '../../bot/context.js';
import { BotModule } from '../../bot/types.js';
import { logUserAction, ensureUser } from '../../services/user-history.js';
import { createPartnerReferral, recordPartnerTransaction } from '../../services/partner-service.js';

const greeting = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
Plazma Water ‚Äî –∂–∏–¥–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã –≤ –Ω–∞–Ω–æ—Ñ–æ—Ä–º–µ.
üíß –£—Å–≤–æ–µ–Ω–∏–µ ‚Äî –¥–æ 99,9% (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–∞–±–ª–µ—Ç–æ–∫ 1‚Äì10%).
‚ö° –ë—ã—Å—Ç—Ä–æ, –ª–µ–≥–∫–æ –∏ –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—á–µ–Ω—å –∏ –ø–æ—á–∫–∏ ‚Äî –ø–∏—Ç–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ –∫–ª–µ—Ç–∫–∏.

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? üëá`;

const introDetails = `‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.

üíß –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω–∞–Ω–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –¥–æ 99,9%, –¥–æ—Å—Ç–∞–≤–ª—è—è –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä—è–º–æ –≤ –∫–ª–µ—Ç–∫–∏.
‚ö° –ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –ª—ë–≥–∫–æ—Å—Ç—å, —è—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä—è–¥ —Å–∏–ª –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å.

üåø –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—á–µ–Ω—å –∏ –ø–æ—á–∫–∏.
üõ° –ù–∞–¥—ë–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∏—Ä—É—Å–æ–≤ –∏ –ø–∞—Ç–æ–≥–µ–Ω–æ–≤.
üíö –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –Ω–∞ –∫–ª–µ—Ç–æ—á–Ω–æ–º —É—Ä–æ–≤–Ω–µ.

üë©‚Äçü¶∞ –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ Plazma Water –≤ –∫–æ—Å–º–µ—Ç–∏–∫—É –∏ —É—Ö–æ–¥.
üè° –ó–∞–±–æ—Ç–∞ –æ –¥–æ–º–µ –∏ –ø—Ä–∏—Ä–æ–¥–µ ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π, —É—Å–∏–ª–∏–≤–∞—è –∏—Ö —Ä–æ—Å—Ç.

üî• –û–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç ‚Äî –¥–µ—Å—è—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π: –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏, –∑–¥–æ—Ä–æ–≤—å—è, –∫—Ä–∞—Å–æ—Ç—ã –∏ –≥–∞—Ä–º–æ–Ω–∏–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—â—É—â–∞–µ—Ç—Å—è —É–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π.`;

export function mainKeyboard() {
  return Markup.keyboard([
    ['üõí –ú–∞–≥–∞–∑–∏–Ω', 'üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞'],
    ['üí∞ –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞'],
    ['‚≠ê –û—Ç–∑—ã–≤—ã', '‚ÑπÔ∏è –û –Ω–∞—Å'],
  ]).resize();
}

export const navigationModule: BotModule = {
  async register(bot: Telegraf<Context>) {
    bot.start(async (ctx) => {
      await logUserAction(ctx, 'command:start');
      
      // Check if user came from referral link
      const startPayload = ctx.startPayload;
      console.log('üîó Referral: startPayload =', startPayload);
      
      if (startPayload && (startPayload.startsWith('ref_direct_') || startPayload.startsWith('ref_multi_'))) {
        const parts = startPayload.split('_');
        console.log('üîó Referral: parts =', parts);
        
        const programType = parts[1] === 'direct' ? 'DIRECT' : 'MULTI_LEVEL';
        const referralCode = parts.slice(2).join('_'); // Join remaining parts in case code contains underscores
        
        console.log('üîó Referral: programType =', programType, 'referralCode =', referralCode);
        
        try {
          // Find partner profile by referral code
          const { prisma } = await import('../../lib/prisma.js');
          console.log('üîó Referral: Searching for partner profile with code:', referralCode);
          
          const partnerProfile = await prisma.partnerProfile.findUnique({
            where: { referralCode },
            include: { user: true }
          });
          
          console.log('üîó Referral: Found partner profile:', partnerProfile ? 'YES' : 'NO');
          
          if (partnerProfile) {
            // Ensure user exists first
            const user = await ensureUser(ctx);
            if (!user) {
              console.log('üîó Referral: Failed to ensure user');
              await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
              return;
            }
            
            console.log('üîó Referral: User ensured, creating referral record');
            // Create referral record using user ID (ObjectId)
            await createPartnerReferral(partnerProfile.id, 1, user.id);
            
            // Award 3PZ to the inviter
            console.log('üîó Referral: Awarding 3PZ bonus to inviter');
            await recordPartnerTransaction(
              partnerProfile.id, 
              3, 
              '–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞', 
              'CREDIT'
            );
            console.log('üîó Referral: Bonus awarded successfully');
            
            // Send notification to inviter
            try {
              console.log('üîó Referral: Sending notification to inviter:', partnerProfile.user.telegramId);
              await ctx.telegram.sendMessage(
                partnerProfile.user.telegramId,
                'üéâ –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 3PZ, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –∑–∞ –±–æ–Ω—É—Å—ã!'
              );
              console.log('üîó Referral: Notification sent successfully');
            } catch (error) {
              console.warn('üîó Referral: Failed to send notification to inviter:', error);
            }
            
            const programText = programType === 'DIRECT' 
              ? '–ø—Ä—è–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (25% —Å –ø–æ–∫—É–ø–æ–∫)'
              : '–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (15% + 5% + 5%)';
              
            const bonusText = `\n\nüí° –£—Å–ª–æ–≤–∏—è –±–æ–Ω—É—Å–∞:
‚Ä¢ –í–∞—à –±–æ–Ω—É—Å 10%
‚Ä¢ –ë–æ–Ω—É—Å ${programType === 'DIRECT' ? '25%' : '15%+5%+5%'} –Ω–∞—á–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –í–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 200PZ –≤ –º–µ—Å—è—Ü`;
              
          console.log('üîó Referral: Sending welcome message with bonus info');
          await ctx.reply(`üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç ${partnerProfile.user.firstName || '–ø–∞—Ä—Ç–Ω—ë—Ä–∞'} –≤ ${programText}!${bonusText}`);
          console.log('üîó Referral: Welcome message sent');
          
          await logUserAction(ctx, 'partner:referral_joined', {
            referralCode,
            partnerId: partnerProfile.id,
            programType
          });
          console.log('üîó Referral: User action logged');
        } else {
          console.log('üîó Referral: Partner profile not found for code:', referralCode);
          await ctx.reply('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
      } catch (error) {
        console.error('üîó Referral: Error processing referral:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    await ctx.reply(greeting, mainKeyboard());

    // Send welcome message with video button
    const videoUrl = 'https://res.cloudinary.com/dt4r1tigf/video/upload/v1759337188/%D0%9F%D0%9E%D0%A7%D0%95%D0%9C%D0%A3_%D0%91%D0%90%D0%94%D0%AB_%D0%BD%D0%B5_%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%8E%D1%82_%D0%95%D1%81%D1%82%D1%8C_%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B5_gz54oh.mp4';
    
    await ctx.reply('‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ',
              url: videoUrl,
            },
          ],
          [
            {
              text: 'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
              callback_data: 'nav:more',
            },
          ],
        ],
      },
    });
    });


    bot.hears(['–ú–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'], async (ctx) => {
      await logUserAction(ctx, 'menu:main');
      await ctx.reply(greeting, mainKeyboard());
      
      // Send welcome message with video button
      const videoUrl = 'https://res.cloudinary.com/dt4r1tigf/video/upload/v1759337188/%D0%9F%D0%9E%D0%A7%D0%95%D0%9C%D0%A3_%D0%91%D0%90%D0%94%D0%AB_%D0%BD%D0%B5_%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%8E%D1%82_%D0%95%D1%81%D1%82%D1%8C_%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B5_gz54oh.mp4';
      
      await ctx.reply('‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ',
                url: videoUrl,
              },
            ],
            [
              {
                text: 'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                callback_data: 'nav:more',
              },
            ],
          ],
        },
      });
    });


    bot.action('nav:more', async (ctx) => {
      await ctx.answerCbQuery();
      await logUserAction(ctx, 'cta:detailed-intro');
      await ctx.reply(introDetails);
    });

    // Handle "–û –Ω–∞—Å" button
    bot.hears(['‚ÑπÔ∏è –û –Ω–∞—Å'], async (ctx) => {
      await logUserAction(ctx, 'menu:about');
      await ctx.reply(introDetails);
    });


  },
};
