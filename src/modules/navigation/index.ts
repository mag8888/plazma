import { Telegraf, Markup } from 'telegraf';
import { Context } from '../../bot/context.js';
import { BotModule } from '../../bot/types.js';
import { logUserAction, ensureUser } from '../../services/user-history.js';
import { createPartnerReferral, recordPartnerTransaction } from '../../services/partner-service.js';

const greeting = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
Plazma Water ‚Äî –∂–∏–¥–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã –≤ –Ω–∞–Ω–æ—Ñ–æ—Ä–º–µ.
üíß –£—Å–≤–æ–µ–Ω–∏–µ ‚Äî –¥–æ 99,9% (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–∞–±–ª–µ—Ç–æ–∫ 1‚Äì10%).
‚ö° –ë—ã—Å—Ç—Ä–æ, –ª–µ–≥–∫–æ –∏ –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—á–µ–Ω—å –∏ –ø–æ—á–∫–∏ ‚Äî –ø–∏—Ç–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ –∫–ª–µ—Ç–∫–∏.

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? üëá`;

const introDetails = `‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.

üíß –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω–∞–Ω–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –¥–æ 99,9%, –¥–æ—Å—Ç–∞–≤–ª—è—è –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä—è–º–æ –≤ –∫–ª–µ—Ç–∫–∏.
‚ö° –ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –ª—ë–≥–∫–æ—Å—Ç—å, —è—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä—è–¥ —Å–∏–ª –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å.

üåø –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—á–µ–Ω—å –∏ –ø–æ—á–∫–∏.
üõ° –ù–∞–¥—ë–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∏—Ä—É—Å–æ–≤ –∏ –ø–∞—Ç–æ–≥–µ–Ω–æ–≤.
üíö –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –Ω–∞ –∫–ª–µ—Ç–æ—á–Ω–æ–º —É—Ä–æ–≤–Ω–µ.

üë©‚Äçü¶∞ –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ Plazma Water –≤ –∫–æ—Å–º–µ—Ç–∏–∫—É –∏ —É—Ö–æ–¥.
üè° –ó–∞–±–æ—Ç–∞ –æ –¥–æ–º–µ –∏ –ø—Ä–∏—Ä–æ–¥–µ ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π, —É—Å–∏–ª–∏–≤–∞—è –∏—Ö —Ä–æ—Å—Ç.

üî• –û–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç ‚Äî –¥–µ—Å—è—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π: –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏, –∑–¥–æ—Ä–æ–≤—å—è, –∫—Ä–∞—Å–æ—Ç—ã –∏ –≥–∞—Ä–º–æ–Ω–∏–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—â—É—â–∞–µ—Ç—Å—è —É–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π.`;

type MenuStats = Partial<Record<'shop' | 'cart' | 'reviews' | 'partner', string>>;

type NavigationItem = {
  id: string;
  title: string;
  emoji: string;
  description: string;
  badgeKey?: keyof MenuStats;
  defaultBadge?: string;
  handler: (ctx: Context) => Promise<void>;
};

const NAVIGATION_ACTION_PREFIX = 'nav:menu:';

async function showSupport(ctx: Context) {
  await ctx.reply(
    'üí¨ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç ‚Äî –∫–æ–º–∞–Ω–¥–∞ Plazma Water –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.\n\n–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å—Ä–æ—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.'
  );
}

const navigationItems: NavigationItem[] = [
  {
    id: 'shop',
    title: '–ú–∞–≥–∞–∑–∏–Ω',
    emoji: 'üõí',
    description: '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã',
    badgeKey: 'shop',
    handler: async (ctx) => {
      const { showRegionSelection } = await import('../shop/index.js');
      await showRegionSelection(ctx);
    },
  },
  {
    id: 'cart',
    title: '–ö–æ—Ä–∑–∏–Ω–∞',
    emoji: 'üß∫',
    description: '–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
    badgeKey: 'cart',
    handler: async (ctx) => {
      const { showCart } = await import('../cart/index.js');
      await showCart(ctx);
    },
  },
  {
    id: 'partner',
    title: '–ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞',
    emoji: 'ü§ù',
    description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
    handler: async (ctx) => {
      const { showPartnerIntro } = await import('../partner/index.js');
      await showPartnerIntro(ctx);
    },
  },
  {
    id: 'reviews',
    title: '–û—Ç–∑—ã–≤—ã',
    emoji: '‚≠ê',
    description: '–ò—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤',
    badgeKey: 'reviews',
    handler: async (ctx) => {
      const { showReviews } = await import('../reviews/index.js');
      await showReviews(ctx);
    },
  },
  {
    id: 'about',
    title: '–û –Ω–∞—Å',
    emoji: '‚ÑπÔ∏è',
    description: '–ú–∏—Å—Å–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∫–æ–º–∞–Ω–¥–∞ Plazma Water',
    handler: async (ctx) => {
      const { showAbout } = await import('../about/index.js');
      await showAbout(ctx);
    },
  },
  {
    id: 'support',
    title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
    emoji: 'üí¨',
    description: '–û—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ–º —Å –∑–∞–∫–∞–∑–æ–º',
    defaultBadge: '24/7',
    handler: showSupport,
  },
];

function chunkArray<T>(items: T[], size: number): T[][] {
  const result: T[][] = [];
  for (let i = 0; i < items.length; i += size) {
    result.push(items.slice(i, i + size));
  }
  return result;
}

function getBadge(stats: MenuStats, item: NavigationItem) {
  if (item.badgeKey) {
    const value = stats[item.badgeKey];
    if (value) {
      return value;
    }
  }
  return item.defaultBadge;
}

function buildNavigationKeyboard(stats: MenuStats) {
  const buttons = navigationItems.map((item) => {
    const badge = getBadge(stats, item);
    const label = `${item.emoji} ${item.title}${badge ? ` ‚Ä¢ ${badge}` : ''}`;
    return Markup.button.callback(label, `${NAVIGATION_ACTION_PREFIX}${item.id}`);
  });

  return Markup.inlineKeyboard(chunkArray(buttons, 2));
}

function formatMenuMessage(stats: MenuStats) {
  const header = 'üß≠ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Å–µ—Ä–≤–∏—Å—ã</b>\n[ üîç –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º ]';

  const body = navigationItems
    .map((item) => {
      const badge = getBadge(stats, item);
      const lines = [`‚Ä¢ <b>${item.emoji} ${item.title}</b>${badge ? ` <code>${badge}</code>` : ''}`, `  ${item.description}`];
      return lines.join('\n');
    })
    .join('\n\n');

  const footer = 'üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.';

  return `${header}\n\n${body}\n\n${footer}`;
}

async function collectMenuStats(ctx: Context): Promise<MenuStats> {
  const stats: MenuStats = {};

  try {
    const [{ getActiveCategories }, { getActiveReviews }] = await Promise.all([
      import('../../services/shop-service.js'),
      import('../../services/review-service.js'),
    ]);

    const [categories, reviews] = await Promise.all([
      getActiveCategories().catch(() => []),
      getActiveReviews().catch(() => []),
    ]);

    if (categories.length > 0) {
      stats.shop = String(categories.length);
    }

    if (reviews.length > 0) {
      stats.reviews = String(reviews.length);
    }
  } catch (error) {
    console.warn('üß≠ Navigation: Failed to collect shared stats', error);
  }

  const userId = ctx.from?.id?.toString();
  if (userId) {
    try {
      const { getCartItems } = await import('../../services/cart-service.js');
      const cartItems = await getCartItems(userId);
      const totalQuantity = cartItems.reduce((sum, item) => sum + (item.quantity ?? 0), 0);
      if (totalQuantity > 0) {
        stats.cart = String(totalQuantity);
      }
    } catch (error) {
      console.warn('üß≠ Navigation: Failed to collect cart stats', error);
    }
  }

  return stats;
}

async function sendNavigationMenu(ctx: Context) {
  const stats = await collectMenuStats(ctx);
  const message = formatMenuMessage(stats);
  const keyboard = buildNavigationKeyboard(stats);

  await ctx.reply(message, {
    parse_mode: 'HTML',
    ...keyboard,
  });
}

export function mainKeyboard() {
  return Markup.keyboard([
    ['üõí –ú–∞–≥–∞–∑–∏–Ω', 'üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞'],
    ['üí∞ –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞'],
    ['‚≠ê –û—Ç–∑—ã–≤—ã', '‚ÑπÔ∏è –û –Ω–∞—Å'],
  ]).resize();
}

export const navigationModule: BotModule = {
  async register(bot: Telegraf<Context>) {
    bot.start(async (ctx) => {
      await logUserAction(ctx, 'command:start');
      
      // Check if user came from referral link
      const startPayload = ctx.startPayload;
      console.log('üîó Referral: startPayload =', startPayload);
      
      if (startPayload && (startPayload.startsWith('ref_direct_') || startPayload.startsWith('ref_multi_'))) {
        const parts = startPayload.split('_');
        console.log('üîó Referral: parts =', parts);
        
        const programType = parts[1] === 'direct' ? 'DIRECT' : 'MULTI_LEVEL';
        const referralCode = parts.slice(2).join('_'); // Join remaining parts in case code contains underscores
        
        console.log('üîó Referral: programType =', programType, 'referralCode =', referralCode);
        
        try {
          // Find partner profile by referral code
          const { prisma } = await import('../../lib/prisma.js');
          console.log('üîó Referral: Searching for partner profile with code:', referralCode);
          
          const partnerProfile = await prisma.partnerProfile.findUnique({
            where: { referralCode },
            include: { user: true }
          });
          
          console.log('üîó Referral: Found partner profile:', partnerProfile ? 'YES' : 'NO');
          
          if (partnerProfile) {
            // Ensure user exists first
            const user = await ensureUser(ctx);
            if (!user) {
              console.log('üîó Referral: Failed to ensure user');
              await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
              return;
            }
            
            console.log('üîó Referral: User ensured, creating referral record');
            // Create referral record using user ID (ObjectId)
            await createPartnerReferral(partnerProfile.id, 1, user.id);
            
            // Award 3PZ to the inviter
            console.log('üîó Referral: Awarding 3PZ bonus to inviter');
            await recordPartnerTransaction(
              partnerProfile.id, 
              3, 
              '–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞', 
              'CREDIT'
            );
            console.log('üîó Referral: Bonus awarded successfully');
            
            // Send notification to inviter
            try {
              console.log('üîó Referral: Sending notification to inviter:', partnerProfile.user.telegramId);
              await ctx.telegram.sendMessage(
                partnerProfile.user.telegramId,
                'üéâ –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 3PZ, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –∑–∞ –±–æ–Ω—É—Å—ã!'
              );
              console.log('üîó Referral: Notification sent successfully');
            } catch (error) {
              console.warn('üîó Referral: Failed to send notification to inviter:', error);
            }
            
          console.log('üîó Referral: Sending welcome message with bonus info');
          await ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

üéâ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${partnerProfile.user.firstName || '–ø–∞—Ä—Ç–Ω—ë—Ä'}

‚ú® Plazma Water ‚Äî –∂–∏–¥–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã –≤ –Ω–∞–Ω–æ—Ñ–æ—Ä–º–µ.
üíß –£—Å–≤–æ–µ–Ω–∏–µ ‚Äî –¥–æ 99,9% (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–∞–±–ª–µ—Ç–æ–∫ 1‚Äì10%).
‚ö° –ë—ã—Å—Ç—Ä–æ, –ª–µ–≥–∫–æ –∏ –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—á–µ–Ω—å –∏ –ø–æ—á–∫–∏ ‚Äî –ø–∏—Ç–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ –∫–ª–µ—Ç–∫–∏.

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? üëá`);
          console.log('üîó Referral: Welcome message sent');
          
          await logUserAction(ctx, 'partner:referral_joined', {
            referralCode,
            partnerId: partnerProfile.id,
            programType
          });
          console.log('üîó Referral: User action logged');
        } else {
          console.log('üîó Referral: Partner profile not found for code:', referralCode);
          await ctx.reply('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
      } catch (error) {
        console.error('üîó Referral: Error processing referral:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    await ctx.reply(greeting, mainKeyboard());
    await sendNavigationMenu(ctx);

    // Send welcome message with video button
    const videoUrl = 'https://res.cloudinary.com/dt4r1tigf/video/upload/v1759337188/%D0%9F%D0%9E%D0%A7%D0%95%D0%9C%D0%A3_%D0%91%D0%90%D0%94%D0%AB_%D0%BD%D0%B5_%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%8E%D1%82_%D0%95%D1%81%D1%82%D1%8C_%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B5_gz54oh.mp4';
    
    await ctx.reply('‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ',
              url: videoUrl,
            },
          ],
          [
            {
              text: 'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
              callback_data: 'nav:more',
            },
          ],
        ],
      },
    });
    });


    bot.hears(['–ú–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'], async (ctx) => {
      await logUserAction(ctx, 'menu:main');
      await ctx.reply(greeting, mainKeyboard());
      await sendNavigationMenu(ctx);
      
      // Send welcome message with video button
      const videoUrl = 'https://res.cloudinary.com/dt4r1tigf/video/upload/v1759337188/%D0%9F%D0%9E%D0%A7%D0%95%D0%9C%D0%A3_%D0%91%D0%90%D0%94%D0%AB_%D0%BD%D0%B5_%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%8E%D1%82_%D0%95%D1%81%D1%82%D1%8C_%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B5_gz54oh.mp4';
      
      await ctx.reply('‚ú® Plazma Water ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ',
                url: videoUrl,
              },
            ],
            [
              {
                text: 'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                callback_data: 'nav:more',
              },
            ],
          ],
        },
      });
    });


    bot.action('nav:more', async (ctx) => {
      await ctx.answerCbQuery();
      await logUserAction(ctx, 'cta:detailed-intro');
      await ctx.reply(introDetails);
    });

    for (const item of navigationItems) {
      bot.action(`${NAVIGATION_ACTION_PREFIX}${item.id}`, async (ctx) => {
        await ctx.answerCbQuery();
        await logUserAction(ctx, `menu:${item.id}`, { source: 'navigation-card' });

        try {
          await item.handler(ctx);
        } catch (error) {
          console.error(`üß≠ Navigation: Failed to open section ${item.id}`, error);
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      });
    }

    // Handle "–û –Ω–∞—Å" button
    bot.hears(['‚ÑπÔ∏è –û –Ω–∞—Å'], async (ctx) => {
      await logUserAction(ctx, 'menu:about');
      await ctx.reply(introDetails);
    });


  },
};
